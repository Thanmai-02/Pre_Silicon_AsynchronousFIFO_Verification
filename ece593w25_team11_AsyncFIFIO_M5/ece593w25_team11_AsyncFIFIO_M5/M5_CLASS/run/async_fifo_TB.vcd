$date
	Tue Mar  4 22:34:22 2025
$end
$version
	QuestaSim Version 2024.2
$end
$timescale
	1ns
$end

$scope module async_fifo_TB $end

$scope module in $end
$var parameter 32 ! DATA_WIDTH $end
$var reg 1 " w_clk $end
$var reg 1 # wrst_n $end
$var reg 1 $ r_clk $end
$var reg 1 % rrst_n $end
$var reg 1 & w_en $end
$var reg 1 ' r_en $end
$var reg 8 ( data_in [7:0] $end
$var reg 8 ) data_out [7:0] $end
$var reg 1 * full $end
$var reg 1 + empty $end
$var reg 1 , write_error $end
$var reg 1 - read_error $end
$upscope $end

$scope module as_fifo $end
$var parameter 32 . DEPTH $end
$var parameter 32 / DATA_WIDTH $end
$var parameter 32 0 PTR_WIDTH $end
$var wire 1 1 w_clk $end
$var wire 1 2 wrst_n $end
$var wire 1 3 r_clk $end
$var wire 1 4 rrst_n $end
$var wire 1 5 w_en $end
$var wire 1 6 r_en $end
$var wire 1 7 data_in [7] $end
$var wire 1 8 data_in [6] $end
$var wire 1 9 data_in [5] $end
$var wire 1 : data_in [4] $end
$var wire 1 ; data_in [3] $end
$var wire 1 < data_in [2] $end
$var wire 1 = data_in [1] $end
$var wire 1 > data_in [0] $end
$var reg 8 ? data_out [7:0] $end
$var reg 1 @ full $end
$var reg 1 A empty $end
$var reg 1 B write_error $end
$var reg 1 C read_error $end
$var reg 9 D g_wptr_sync [8:0] $end
$var reg 9 E g_rptr_sync [8:0] $end
$var reg 9 F b_wptr [8:0] $end
$var reg 9 G b_rptr [8:0] $end
$var reg 9 H g_wptr [8:0] $end
$var reg 9 I g_rptr [8:0] $end
$var wire 1 J waddr [7] $end
$var wire 1 K waddr [6] $end
$var wire 1 L waddr [5] $end
$var wire 1 M waddr [4] $end
$var wire 1 N waddr [3] $end
$var wire 1 O waddr [2] $end
$var wire 1 P waddr [1] $end
$var wire 1 Q waddr [0] $end
$var wire 1 R raddr [7] $end
$var wire 1 S raddr [6] $end
$var wire 1 T raddr [5] $end
$var wire 1 U raddr [4] $end
$var wire 1 V raddr [3] $end
$var wire 1 W raddr [2] $end
$var wire 1 X raddr [1] $end
$var wire 1 Y raddr [0] $end

$scope module sync_wptr $end
$var parameter 32 Z WIDTH $end
$var wire 1 3 clk $end
$var wire 1 4 rst_n $end
$var wire 1 [ d_in [8] $end
$var wire 1 \ d_in [7] $end
$var wire 1 ] d_in [6] $end
$var wire 1 ^ d_in [5] $end
$var wire 1 _ d_in [4] $end
$var wire 1 ` d_in [3] $end
$var wire 1 a d_in [2] $end
$var wire 1 b d_in [1] $end
$var wire 1 c d_in [0] $end
$var reg 9 d d_out [8:0] $end
$var reg 9 e q1 [8:0] $end
$upscope $end

$scope module sync_rptr $end
$var parameter 32 f WIDTH $end
$var wire 1 1 clk $end
$var wire 1 2 rst_n $end
$var wire 1 g d_in [8] $end
$var wire 1 h d_in [7] $end
$var wire 1 i d_in [6] $end
$var wire 1 j d_in [5] $end
$var wire 1 k d_in [4] $end
$var wire 1 l d_in [3] $end
$var wire 1 m d_in [2] $end
$var wire 1 n d_in [1] $end
$var wire 1 o d_in [0] $end
$var reg 9 p d_out [8:0] $end
$var reg 9 q q1 [8:0] $end
$upscope $end

$scope module wptr_h $end
$var parameter 32 r PTR_WIDTH $end
$var wire 1 1 w_clk $end
$var wire 1 2 wrst_n $end
$var wire 1 5 w_en $end
$var wire 1 s g_rptr_sync [8] $end
$var wire 1 t g_rptr_sync [7] $end
$var wire 1 u g_rptr_sync [6] $end
$var wire 1 v g_rptr_sync [5] $end
$var wire 1 w g_rptr_sync [4] $end
$var wire 1 x g_rptr_sync [3] $end
$var wire 1 y g_rptr_sync [2] $end
$var wire 1 z g_rptr_sync [1] $end
$var wire 1 { g_rptr_sync [0] $end
$var reg 9 | b_wptr [8:0] $end
$var reg 9 } g_wptr [8:0] $end
$var reg 1 ~ full $end
$var reg 9 !! b_wptr_next [8:0] $end
$var reg 9 "! g_wptr_next [8:0] $end
$var reg 1 #! wrap_around $end
$var wire 1 $! wfull $end
$upscope $end

$scope module rptr_h $end
$var parameter 32 %! PTR_WIDTH $end
$var wire 1 3 r_clk $end
$var wire 1 4 rrst_n $end
$var wire 1 6 r_en $end
$var wire 1 &! g_wptr_sync [8] $end
$var wire 1 '! g_wptr_sync [7] $end
$var wire 1 (! g_wptr_sync [6] $end
$var wire 1 )! g_wptr_sync [5] $end
$var wire 1 *! g_wptr_sync [4] $end
$var wire 1 +! g_wptr_sync [3] $end
$var wire 1 ,! g_wptr_sync [2] $end
$var wire 1 -! g_wptr_sync [1] $end
$var wire 1 .! g_wptr_sync [0] $end
$var reg 9 /! b_rptr [8:0] $end
$var reg 9 0! g_rptr [8:0] $end
$var reg 1 1! empty $end
$var reg 9 2! b_rptr_next [8:0] $end
$var reg 9 3! g_rptr_next [8:0] $end
$var reg 1 4! rempty $end
$upscope $end

$scope module fifom $end
$var parameter 32 5! DEPTH $end
$var parameter 32 6! DATA_WIDTH $end
$var parameter 32 7! PTR_WIDTH $end
$var wire 1 1 w_clk $end
$var wire 1 5 w_en $end
$var wire 1 3 r_clk $end
$var wire 1 6 r_en $end
$var wire 1 8! b_wptr [8] $end
$var wire 1 9! b_wptr [7] $end
$var wire 1 :! b_wptr [6] $end
$var wire 1 ;! b_wptr [5] $end
$var wire 1 <! b_wptr [4] $end
$var wire 1 =! b_wptr [3] $end
$var wire 1 >! b_wptr [2] $end
$var wire 1 ?! b_wptr [1] $end
$var wire 1 @! b_wptr [0] $end
$var wire 1 A! b_rptr [8] $end
$var wire 1 B! b_rptr [7] $end
$var wire 1 C! b_rptr [6] $end
$var wire 1 D! b_rptr [5] $end
$var wire 1 E! b_rptr [4] $end
$var wire 1 F! b_rptr [3] $end
$var wire 1 G! b_rptr [2] $end
$var wire 1 H! b_rptr [1] $end
$var wire 1 I! b_rptr [0] $end
$var wire 1 7 data_in [7] $end
$var wire 1 8 data_in [6] $end
$var wire 1 9 data_in [5] $end
$var wire 1 : data_in [4] $end
$var wire 1 ; data_in [3] $end
$var wire 1 < data_in [2] $end
$var wire 1 = data_in [1] $end
$var wire 1 > data_in [0] $end
$var wire 1 J! full $end
$var wire 1 K! empty $end
$var reg 8 L! data_out [7:0] $end
$var reg 1 M! write_error $end
$var reg 1 N! read_error $end
